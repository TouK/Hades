DROP TABLE HADES_RESULTS;
CREATE TABLE HADES_RESULTS (
  DS           VARCHAR(128)  NOT NULL,
  SQL_STMT     VARCHAR(100)  NOT NULL,
  CONN_TIMEOUT INT           NOT NULL,
  EXEC_TIMEOUT INT           NOT NULL,
  TIME_NANOS   INT           NOT NULL,
  HOST         VARCHAR(128)  NOT NULL,
  REPO         VARCHAR(128)  NOT NULL,
  MAIN_DS      VARCHAR(128)  NOT NULL,
  FAILOVER_DS  VARCHAR(128)  NOT NULL,
  TS           TIMESTAMP     NOT NULL,

  PRIMARY KEY (DS, SQL_STMT, CONN_TIMEOUT, EXEC_TIMEOUT)
);

DROP TABLE HADES_STATES;
CREATE TABLE HADES_STATES (
  MODIFIED_MILLIS INT          NOT NULL,
  HOST            VARCHAR(128) NOT NULL,
  QUARTZ_INSTANCE VARCHAR(128) NOT NULL,
  QUARTZ_CLUSTER  VARCHAR(128) NOT NULL,
  MAIN_DS         VARCHAR(128) NOT NULL,
  FAILOVER_DS     VARCHAR(128) NOT NULL,
  FAILOVER_ACTIVE CHAR(1)      NOT NULL,
  DURATION_MILLIS INT          NOT NULL,
  MAIN_NANOS      INT          NOT NULL,
  FAILOVER_NANOS  INT          NOT NULL,

  PRIMARY KEY (QUARTZ_CLUSTER, MAIN_DS, FAILOVER_DS)
);

--
-- A HINT SUBMITTED BY A USER: ORACLE DB MUST BE CREATED AS "SHARED" AND THE 
-- JOB_QUEUE_PROCESSES PARAMETER  MUST BE GREATER THAN 2, OTHERWISE A DB LOCK 
-- WILL HAPPEN.   HOWEVER, THESE SETTINGS ARE PRETTY MUCH STANDARD AFTER ANY
-- ORACLE INSTALL, SO MOST USERS NEED NOT WORRY ABOUT THIS.
--
-- MANY OTHER USERS (INCLUDING THE PRIMARY AUTHOR OF QUARTZ) HAVE HAD SUCCESS
-- RUNING IN DEDICATED MODE, SO ONLY CONSIDER THE ABOVE AS A HINT ;-)
--

DELETE FROM HADES_JOB_LISTENERS;
DELETE FROM HADES_TRIGGER_LISTENERS;
DELETE FROM HADES_FIRED_TRIGGERS;
DELETE FROM HADES_SIMPLE_TRIGGERS;
DELETE FROM HADES_CRON_TRIGGERS;
DELETE FROM HADES_BLOB_TRIGGERS;
DELETE FROM HADES_TRIGGERS;
DELETE FROM HADES_JOB_DETAILS;
DELETE FROM HADES_CALENDARS;
DELETE FROM HADES_PAUSED_TRIGGER_GRPS;
DELETE FROM HADES_LOCKS;
DELETE FROM HADES_SCHEDULER_STATE;

DROP TABLE HADES_CALENDARS;
DROP TABLE HADES_FIRED_TRIGGERS;
DROP TABLE HADES_TRIGGER_LISTENERS;
DROP TABLE HADES_BLOB_TRIGGERS;
DROP TABLE HADES_CRON_TRIGGERS;
DROP TABLE HADES_SIMPLE_TRIGGERS;
DROP TABLE HADES_TRIGGERS;
DROP TABLE HADES_JOB_LISTENERS;
DROP TABLE HADES_JOB_DETAILS;
DROP TABLE HADES_PAUSED_TRIGGER_GRPS;
DROP TABLE HADES_LOCKS;
DROP TABLE HADES_SCHEDULER_STATE;


CREATE TABLE HADES_JOB_DETAILS
  (
    JOB_NAME  VARCHAR2(200) NOT NULL,
    JOB_GROUP VARCHAR2(200) NOT NULL,
    DESCRIPTION VARCHAR2(250) NULL,
    JOB_CLASS_NAME   VARCHAR2(250) NOT NULL, 
    IS_DURABLE VARCHAR2(1) NOT NULL,
    IS_VOLATILE VARCHAR2(1) NOT NULL,
    IS_STATEFUL VARCHAR2(1) NOT NULL,
    REQUESTS_RECOVERY VARCHAR2(1) NOT NULL,
    JOB_DATA BLOB NULL,
    PRIMARY KEY (JOB_NAME,JOB_GROUP)
);
CREATE TABLE HADES_JOB_LISTENERS
  (
    JOB_NAME  VARCHAR2(200) NOT NULL, 
    JOB_GROUP VARCHAR2(200) NOT NULL,
    JOB_LISTENER VARCHAR2(200) NOT NULL,
    PRIMARY KEY (JOB_NAME,JOB_GROUP,JOB_LISTENER),
    FOREIGN KEY (JOB_NAME,JOB_GROUP) 
	REFERENCES HADES_JOB_DETAILS(JOB_NAME,JOB_GROUP)
);
CREATE TABLE HADES_TRIGGERS
  (
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    JOB_NAME  VARCHAR2(200) NOT NULL, 
    JOB_GROUP VARCHAR2(200) NOT NULL,
    IS_VOLATILE VARCHAR2(1) NOT NULL,
    DESCRIPTION VARCHAR2(250) NULL,
    NEXT_FIRE_TIME NUMBER(13) NULL,
    PREV_FIRE_TIME NUMBER(13) NULL,
    PRIORITY NUMBER(13) NULL,
    TRIGGER_STATE VARCHAR2(16) NOT NULL,
    TRIGGER_TYPE VARCHAR2(8) NOT NULL,
    START_TIME NUMBER(13) NOT NULL,
    END_TIME NUMBER(13) NULL,
    CALENDAR_NAME VARCHAR2(200) NULL,
    MISFIRE_INSTR NUMBER(2) NULL,
    JOB_DATA BLOB NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (JOB_NAME,JOB_GROUP) 
	REFERENCES HADES_JOB_DETAILS(JOB_NAME,JOB_GROUP) 
);
CREATE TABLE HADES_SIMPLE_TRIGGERS
  (
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    REPEAT_COUNT NUMBER(7) NOT NULL,
    REPEAT_INTERVAL NUMBER(12) NOT NULL,
    TIMES_TRIGGERED NUMBER(10) NOT NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) 
	REFERENCES HADES_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE HADES_CRON_TRIGGERS
  (
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    CRON_EXPRESSION VARCHAR2(120) NOT NULL,
    TIME_ZONE_ID VARCHAR2(80),
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) 
	REFERENCES HADES_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE HADES_BLOB_TRIGGERS
  (
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    BLOB_DATA BLOB NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) 
        REFERENCES HADES_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE HADES_TRIGGER_LISTENERS
  (
    TRIGGER_NAME  VARCHAR2(200) NOT NULL, 
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    TRIGGER_LISTENER VARCHAR2(200) NOT NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_LISTENER),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) 
	REFERENCES HADES_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE HADES_CALENDARS
  (
    CALENDAR_NAME  VARCHAR2(200) NOT NULL, 
    CALENDAR BLOB NOT NULL,
    PRIMARY KEY (CALENDAR_NAME)
);
CREATE TABLE HADES_PAUSED_TRIGGER_GRPS
  (
    TRIGGER_GROUP  VARCHAR2(200) NOT NULL, 
    PRIMARY KEY (TRIGGER_GROUP)
);
CREATE TABLE HADES_FIRED_TRIGGERS 
  (
    ENTRY_ID VARCHAR2(95) NOT NULL,
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    IS_VOLATILE VARCHAR2(1) NOT NULL,
    INSTANCE_NAME VARCHAR2(200) NOT NULL,
    FIRED_TIME NUMBER(13) NOT NULL,
    PRIORITY NUMBER(13) NOT NULL,
    STATE VARCHAR2(16) NOT NULL,
    JOB_NAME VARCHAR2(200) NULL,
    JOB_GROUP VARCHAR2(200) NULL,
    IS_STATEFUL VARCHAR2(1) NULL,
    REQUESTS_RECOVERY VARCHAR2(1) NULL,
    PRIMARY KEY (ENTRY_ID)
);
CREATE TABLE HADES_SCHEDULER_STATE 
  (
    INSTANCE_NAME VARCHAR2(200) NOT NULL,
    LAST_CHECKIN_TIME NUMBER(13) NOT NULL,
    CHECKIN_INTERVAL NUMBER(13) NOT NULL,
    PRIMARY KEY (INSTANCE_NAME)
);
CREATE TABLE HADES_LOCKS
  (
    LOCK_NAME  VARCHAR2(40) NOT NULL, 
    PRIMARY KEY (LOCK_NAME)
);
INSERT INTO HADES_LOCKS VALUES('TRIGGER_ACCESS');
INSERT INTO HADES_LOCKS VALUES('JOB_ACCESS');
INSERT INTO HADES_LOCKS VALUES('CALENDAR_ACCESS');
INSERT INTO HADES_LOCKS VALUES('STATE_ACCESS');
INSERT INTO HADES_LOCKS VALUES('MISFIRE_ACCESS');
CREATE INDEX IDX_HADES_J_REQ_RECOVERY ON HADES_JOB_DETAILS(REQUESTS_RECOVERY);
CREATE INDEX IDX_HADES_T_NEXT_FIRE_TIME ON HADES_TRIGGERS(NEXT_FIRE_TIME);
CREATE INDEX IDX_HADES_T_STATE ON HADES_TRIGGERS(TRIGGER_STATE);
CREATE INDEX IDX_HADES_T_NFT_ST ON HADES_TRIGGERS(NEXT_FIRE_TIME,TRIGGER_STATE);
CREATE INDEX IDX_HADES_T_VOLATILE ON HADES_TRIGGERS(IS_VOLATILE);
CREATE INDEX IDX_HADES_FT_TRIG_NAME ON HADES_FIRED_TRIGGERS(TRIGGER_NAME);
CREATE INDEX IDX_HADES_FT_TRIG_GROUP ON HADES_FIRED_TRIGGERS(TRIGGER_GROUP);
CREATE INDEX IDX_HADES_FT_TRIG_NM_GP ON HADES_FIRED_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP);
CREATE INDEX IDX_HADES_FT_TRIG_VOLATILE ON HADES_FIRED_TRIGGERS(IS_VOLATILE);
CREATE INDEX IDX_HADES_FT_TRIG_INST_NAME ON HADES_FIRED_TRIGGERS(INSTANCE_NAME);
CREATE INDEX IDX_HADES_FT_JOB_NAME ON HADES_FIRED_TRIGGERS(JOB_NAME);
CREATE INDEX IDX_HADES_FT_JOB_GROUP ON HADES_FIRED_TRIGGERS(JOB_GROUP);
CREATE INDEX IDX_HADES_FT_JOB_STATEFUL ON HADES_FIRED_TRIGGERS(IS_STATEFUL);
CREATE INDEX IDX_HADES_FT_JOB_REQ_RECOVERY ON HADES_FIRED_TRIGGERS(REQUESTS_RECOVERY);



COMMIT;
